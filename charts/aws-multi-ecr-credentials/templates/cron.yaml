apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ include "aws-multi-ecr-credentials.cronJob" . }}
  labels:
{{ include "aws-multi-ecr-credentials.labels" . | indent 4 }}
spec:
  schedule: "{{ .Values.cron }}"
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2  
  jobTemplate:
    spec:
      backoffLimit: 4
      template:
        metadata:
          labels:
{{ include "aws-multi-ecr-credentials.podLabels" . | indent 12 }}
        spec:
          serviceAccountName: {{ include "aws-multi-ecr-credentials.serviceAccount" . }}
          terminationGracePeriodSeconds: 0
          restartPolicy: Never
          containers:
          - name: kubectl
            imagePullPolicy: IfNotPresent
            image: {{ .Values.jobImage }}:{{ .Values.jobImageTag }}
            env:
              - name: AWS_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: {{ include "aws-multi-ecr-credentials.secret" . }}
                    key: AWS_ACCESS_KEY_ID

              - name: AWS_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: {{ include "aws-multi-ecr-credentials.secret" . }}
                    key: AWS_SECRET_ACCESS_KEY

            command:
            - "/bin/sh"
            - "-c"
            - |
              set -e #stop script because of error
              set -x

              #fetching docker password
              DOCKER_REGISTRY_SERVER=https://{{ .Values.aws.account }}.dkr.ecr.{{ .Values.aws.region }}.amazonaws.com
              DOCKER_USER=AWS
              DOCKER_PASSWORD=`aws ecr get-login-password --region {{ .Values.aws.region }}`

              #download latest kubectl binary app
              curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl

              #delete old secret
              ./kubectl -n {{ .Release.Namespace }} delete secret aws-registry-{{ .Values.aws.account }} || true

              #create new secret (.dockerconfigjson)
              ./kubectl create secret docker-registry aws-registry-{{ .Values.aws.account }} \
              --docker-server=$DOCKER_REGISTRY_SERVER \
              --docker-username=$DOCKER_USER \
              --docker-password=$DOCKER_PASSWORD
              
              ./kubectl patch serviceaccount {{ include "aws-multi-ecr-credentials.serviceAccount" . }} -p '{"imagePullSecrets":[{"name":"aws-registry-{{ .Values.aws.account }}"}]}'